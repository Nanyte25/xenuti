# Copyright (C) 2014 Jan Rusnacko
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of the
# MIT license.

require 'spec_helper'
require 'helpers/git_helper'
require 'tmpdir'
require 'ruby_util/dir'

describe Xenuti::ContentUpdate::Git do
  let(:config) do
    c = Xenuti::Config.from_yaml(File.new(CONFIG_FILEPATH).read)
    # substitute with ORIGIN_REPO generated by git_helper
    c[:content_update][:repo] = ORIGIN_REPO
    c
  end
  let(:report) { Xenuti::Report.new }

  context '::update' do
    it 'should check out repo to the latest version' do
      Dir.mktmpdir do |tmpdir|
        config[:general][:workdir] = tmpdir
        cloned = File.join(tmpdir, 'source')
        Xenuti::ContentUpdate::Git.update(config, report)
        expect(Dir.compare(config[:content_update][:repo], cloned)).to be_true
        expect(config[:content_update][:source]).to be_eql(cloned)
      end
    end

    it 'should update repo to the latest version' do
      # OUTDATED_REPO/source is one commit behind ORIGIN_REPO
      config[:general][:workdir] = OUTDATED_REPO
      Xenuti::ContentUpdate::Git.update(config, report)
      expect(Dir.compare(config[:content_update][:repo], \
                         File.join(OUTDATED_REPO, 'source'))).to be_true
    end
  end

  context '::git_clone' do
    it 'should clone to empty directory' do
      Dir.mktmpdir do |tmpdir|
        Xenuti::ContentUpdate::Git.git_clone(ORIGIN_REPO, tmpdir)
        expect(Dir.new(ORIGIN_REPO)).to be_eql(Dir.new(tmpdir))
      end
    end

    it 'should fail when destination is not empty' do
      expect do
        Xenuti::ContentUpdate::Git.git_clone(ORIGIN_REPO, FIXTURES)
      end.to raise_error RuntimeError
    end

    it 'should fail when source is not a git repo' do
      expect do
        Xenuti::ContentUpdate::Git.git_clone('/tmp', FIXTURES)
      end.to raise_error RuntimeError
    end
  end

  context '::git_update' do
    it 'should update outdated repo' do
      # we are testing this as
      # fetch_source#should update repo to the latest version
    end

    it 'should fail when argument is not a git repo' do
      old_pwd = Dir.pwd
      expect do
        Xenuti::ContentUpdate::Git.git_update('/tmp')
      end.to raise_error RuntimeError
      expect(Dir.pwd).to be_eql(old_pwd) # we stay in the same directory
    end
  end

  context 'git_repo?' do
    it 'should return true when git repo is passed' do
      old_pwd = Dir.pwd
      expect(Xenuti::ContentUpdate::Git.git_repo?(ORIGIN_REPO)).to be_true
      expect(Dir.pwd).to be_eql(old_pwd)
    end

    it 'should return false when argument is not a git repo' do
      old_pwd = Dir.pwd
      expect(Xenuti::ContentUpdate::Git.git_repo?('/tmp')).to be_false
      expect(Dir.pwd).to be_eql(old_pwd)
    end

    it 'should return false when argument is non-existent dir' do
      expect(Xenuti::ContentUpdate::Git.git_repo?('/akjfdjhadkjvc')).to be_false
    end
  end
end
